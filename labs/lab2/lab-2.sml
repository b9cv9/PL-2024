(****************************************************************************** 
  Шаблон для выполнения заданий лабораторной работы №2

  НЕ СЛЕДУЕТ УДАЛЯТЬ ИЛИ ПЕРЕСТАВЛЯТЬ МЕСТАМИ ЭЛЕМЕНТЫ, 
  ПРЕДСТАВЛЕННЫЕ В ШАБЛОНЕ (ВКЛЮЧАЯ КОММЕНТАРИИ). 
  ЭЛЕМЕНТЫ РЕШЕНИЯ СЛЕДУЕТ ВПИСЫВАТЬ В ПРОМЕЖУТКИ,
  ОПРЕДЕЛЕННЫЕ КОММЕНТАРИЯМИ.
 ******************************************************************************)

(****************************************************************************** 
  Определение выражений языка MUPL как конструкторов значений типа expr 
 ******************************************************************************)
datatype expr = VAR of string
              | INT of int
              | ADD of expr * expr
              | IF_GREATER of expr * expr * expr * expr
              | FUN of (string * string) * expr
              | CALL of expr * expr
              | LET of (string * expr) * expr
              | PAIR of expr * expr
              | HEAD of expr
              | TAIL of expr
              | NULL 
              | IS_NULL of expr
              | CLOSURE of (string * expr) list * expr
(******************************************************************************)

(****************************************************************************** 
  Описание исключения, которое будет подниматься в случае нарушения семантики 
  выражения языка MUPL
 ******************************************************************************)
exception Expr
(******************************************************************************)

(****************************************************************************** 
  Функция превращения строки в строку, в которой имеются знаки кавычек
 ******************************************************************************)
fun strToString str = String.concat ["\"", str, "\""]
(******************************************************************************)

(****************************************************************************** 
  Задание 1 exprToString и pairToString
 ******************************************************************************)
fun exprToString (VAR s) = String.concat ["VAR ", strToString s]
  | exprToString (INT n) = String.concat ["INT ", Int.toString n]
  | exprToString (ADD (e1, e2)) = String.concat ["ADD (", exprToString e1, ", ", exprToString e2, ")"]
  | exprToString (IF_GREATER (e1, e2, e3, e4)) = String.concat ["IF_GREATER (", exprToString e1, ", ", exprToString e2, ", ", exprToString e3, ", ", exprToString e4, ")"]
  | exprToString (FUN ((s1, s2), e)) = String.concat ["FUN ((", strToString s1, ", ", strToString s2, "), ", exprToString e, ")"]
  | exprToString (CALL (e1, e2)) = String.concat ["CALL (", exprToString e1, ", ", exprToString e2, ")"]
  | exprToString (LET ((s, e1), e2)) = String.concat ["LET ((", strToString s, ", ", exprToString e1, "), ", exprToString e2, ")"]
  | exprToString (PAIR (e1, e2)) = String.concat ["PAIR (", exprToString e1, ", ", exprToString e2, ")"]
  | exprToString (HEAD e) = String.concat ["HEAD (", exprToString e, ")"]
  | exprToString (TAIL e) = String.concat ["TAIL (", exprToString e, ")"]
  | exprToString NULL = "NULL"
  | exprToString (IS_NULL e) = String.concat ["IS_NULL (", exprToString e, ")"]
  | exprToString (CLOSURE (env, f)) = 
      let
        fun envToString [] = ""
          | envToString ((s, e)::rest) = 
              String.concat ["(", strToString s, ", ", exprToString e, ")", 
                             (if null rest then "" else ", " ^ envToString rest)]
      in
        String.concat ["CLOSURE ([", envToString env, "], ", exprToString f, ")"]
      end
and pairToString (var, expr) = String.concat ["(", strToString var, ", ", exprToString expr, ")"]

(******************************************************************************)

(****************************************************************************** 
  Функция valOfInt
 ******************************************************************************)
fun valOfInt (INT n) = n
  | valOfInt e = 
      ( print ("The expression " ^ exprToString e ^ " is not a number.\n"); 
        raise Expr )
(******************************************************************************)

(****************************************************************************** 
  Задание 2 funName
 ******************************************************************************)
fun funName (FUN ((f, _), _)) = f
  | funName e = 
      ( print ("The expression " ^ exprToString e ^ " is not a function.\n"); 
        raise Expr )

(******************************************************************************)

(****************************************************************************** 
  Задание 3 funArg
 ******************************************************************************)
fun funArg (FUN ((_, x), _)) = x
  | funArg e = 
      ( print ("The expression " ^ exprToString e ^ " is not a function.\n"); 
        raise Expr )


(******************************************************************************)

(****************************************************************************** 
  Задание 4 funBody
 ******************************************************************************)
fun funBody (FUN (_, body)) = body
  | funBody e = 
      ( print ("The expression " ^ exprToString e ^ " is not a function.\n"); 
        raise Expr )


(******************************************************************************)

(****************************************************************************** 
  Задание 5 pairHead
 ******************************************************************************)
fun pairHead (PAIR (e1, _)) = e1
  | pairHead e = 
      ( print ("The expression " ^ exprToString e ^ " is not a pair.\n"); 
        raise Expr )


(******************************************************************************)

(****************************************************************************** 
  Задание 6 pairTail
 ******************************************************************************)
fun pairTail (PAIR (_, e2)) = e2
  | pairTail e = 
      ( print ("The expression " ^ exprToString e ^ " is not a pair.\n"); 
        raise Expr )


(******************************************************************************)

(****************************************************************************** 
  Задание 7 closureFun
 ******************************************************************************)

fun closureFun (CLOSURE (_, f)) = f
  | closureFun e = 
      ( print ("The expression " ^ exprToString e ^ " is not a closure.\n"); 
        raise Expr )

(******************************************************************************)

(****************************************************************************** 
  Задание 8 closureEnv
 ******************************************************************************)
fun closureEnv (CLOSURE (env, _)) = env
  | closureEnv e = 
      ( print ("The expression " ^ exprToString e ^ " is not a closure.\n"); 
        raise Expr )


(******************************************************************************)

(****************************************************************************** 
  Задание 9 envLookUp
 ******************************************************************************)
fun envLookUp (lst, str) = raise Match

(******************************************************************************)

(****************************************************************************** 
  Задание 10 evalUnderEnv
 ******************************************************************************)
fun evalUnderEnv (VAR name) env = envLookUp (env, name)
  | evalUnderEnv _ _ = raise Match

(******************************************************************************)

(****************************************************************************** 
  Функция evalExp
 ******************************************************************************)
fun evalExp expr = evalUnderEnv expr []
(******************************************************************************)

(****************************************************************************** 
  Задание 11 ifNull
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 12 mLet
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 13 ifEq
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 14 convertListToMUPL
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 15 convertListFromMUPL
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 16 mMap
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 17 mMapAddN
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 18 multAnyXPosY
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 19 fact
 ******************************************************************************)


(******************************************************************************)

(****************************************************************************** 
  Задание 20 delDuplicates
 ******************************************************************************)


(******************************************************************************)

